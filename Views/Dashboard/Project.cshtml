@model IEnumerable<Productivity_Analytics.Models.Project>
@using Productivity_Analytics.Models
@{
    ViewData["Title"] = "Projects";
    Layout = "~/Views/Shared/_layout-static.cshtml";

    // =================== C# RATING CONVERTER ===================
    string GetRatingString(decimal? rating)
    {
        if (!rating.HasValue) return "No Rating";

        return rating.Value switch
        {
            5m => "Excellent (5)",
            4m => "Very Good (4)",
            3m => "Good (3)",
            2m => "Needs Improvement (2)",
            1m => "Need Training (1)",
            0m => "Firable (0)",
            _ => rating.Value.ToString("0.0") // Fallback for averages like 3.5
        };
    }
    // ==========================================================
}

<div id="projectTableSection" class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span><i class="fas fa-folder-open me-1"></i> Project List</span>
        <button type="button" class="btn btn-primary btn-sm" onclick="openAddProjectModal()">
            <i class="fas fa-plus"></i> Add Project
        </button>
    </div>

    <div class="card-body">
        <table class="table table-striped align-middle text-center">
            <thead class="table-dark">
                <tr>
                    <th>Project Name</th>
                    <th>Employees</th>
                    <th>Start Date</th>
                    <th>Due Date</th>
                    <th>Rating</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="projectTableBody">
                @foreach (var project in Model)
                {
                    if (!project.IsArchived)
                    {
                        <tr>
                            <td>@project.ProjectName</td>
                            <td>
                                @if (project.ProjectEmployees != null && project.ProjectEmployees.Any())
                                {
                                    foreach (var pe in project.ProjectEmployees)
                                    {
                                        <div>
                                            @pe.Employee.Name
                                            <span class="text-muted small">(@GetRatingString(pe.EmployeeRating))</span>
                                        </div>
                                    }
                                }
                                else
                                {
                                    @:No Employees
                                }
                            </td>
                            <td>@project.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@project.DueDate.ToString("yyyy-MM-dd")</td>
                            @* PROJECT RATING DISPLAY IS CORRECT *@
                            <td>@GetRatingString(project.ProjectRating)</td>
                            <td>
                                <span class="badge rounded-pill px-3 py-2" style="background-color:#8f7a00; color:white;">
                                    @(project.IsComplete ? "Completed" : "Ongoing")
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm" style="background-color:#8f7a00; color:white;"
                                        onclick="openEditModal(@project.ProjectId)">
                                    Edit
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="openDeleteModal(@project.ProjectId)">Delete</button>
                                <button class="btn btn-secondary btn-sm" onclick="openArchiveModal(@project.ProjectId)">Archive</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="addProjectModal" tabindex="-1" aria-labelledby="addProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-action="AddProject">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="addProjectModalLabel">Add Project</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Project Name</label>
                            <input type="text" name="ProjectName" class="form-control" required />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Start Date</label>
                            <input type="date" name="StartDate" class="form-control" required />
                        </div>
                        <div class="col">
                            <label class="form-label">Due Date</label>
                            <input type="date" name="DueDate" class="form-control" required />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Select Department</label>
                        <select id="departmentSelect" name="SelectedDepartmentId" class="form-select" required>
                            <option value="">-- Choose Department --</option>
                            @foreach (var dept in ViewBag.Departments)
                            {
                                <option value="@dept.DepartmentId">@dept.DepartmentName</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Assign Employees</label>
                        <div id="employeeList" class="border rounded p-2" style="max-height: 250px; overflow-y: auto;">
                            <p class="text-muted">Select a department first...</p>
                        </div>
                    </div>

                    <div class="mb-3 form-check ms-1">
                        <input type="checkbox" class="form-check-input" name="IsOngoing" id="IsOngoing" />
                        <label class="form-check-label" for="IsOngoing">Mark as Approved</label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Project</button>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="editProjectModal" tabindex="-1" aria-labelledby="editProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-action="UpdateProject">
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title" id="editProjectModalLabel">Edit Project</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="editProjectId" name="ProjectId" />

                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Project Name</label>
                            <input type="text" id="editProjectName" name="ProjectName" class="form-control" required />
                        </div>
                        <div class="col">
                            <label class="form-label">Rating</label>
                            <select id="editProjectRating" name="ProjectRating" class="form-select">
                                <option value="">No Rating</option>
                                <option value="1">1 - Need Training</option>
                                <option value="2">2 - Needs Improvement</option>
                                <option value="3">3 - Good</option>
                                <option value="4">4 - Very Good</option>
                                <option value="5">5 - Excellent</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Start Date</label>
                            <input type="date" id="editStartDate" name="StartDate" class="form-control" required />
                        </div>
                        <div class="col">
                            <label class="form-label">Due Date</label>
                            <input type="date" id="editDueDate" name="DueDate" class="form-control" required />
                        </div>
                    </div>

                    <div class="mb-3 form-check">
                        @* **FIX 2: REMOVED THE CONFLICTING HIDDEN INPUT.** *@
                        <input type="checkbox" class="form-check-input" id="editIsComplete" name="IsComplete" value="true" />
                        <label class="form-check-label" for="editIsComplete">Mark as Completed</label>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Employee Ratings</label>
                        <div id="editEmployeeRatings" class="border rounded p-2 bg-light">
                            <em>Loading...</em>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn" style="background-color:#8f7a00; color:white;">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="deleteProjectModal" tabindex="-1" aria-labelledby="deleteProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-action="DeleteProject">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteProjectModalLabel">Delete Project</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="deleteProjectId" name="projectId" />
                    <p>Are you sure you want to delete this project?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="archiveProjectModal" tabindex="-1" aria-labelledby="archiveProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-action="ArchiveProject">
                <div class="modal-header bg-secondary text-white">
                    <h5 class="modal-title" id="archiveProjectModalLabel">Archive Project</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="archiveProjectId" name="projectId" />
                    <p>Are you sure you want to archive this project?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-secondary">Archive</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Helper function to convert the numeric rating back to a descriptive string for display
        function getRatingDisplay(rating) {
            if (rating === null || rating === undefined || rating === "") {
                return "No Rating";
            }
            const r = parseFloat(rating);
            if (isNaN(r)) return "Invalid Rating";

            switch (r) {
                case 5: return "Excellent (5)";
                case 4: return "Very Good (4)";
                case 3: return "Good (3)";
                case 2: return "Needs Improvement (2)";
                case 1: return "Need Training (1)";
                case 0: return "Firable (0)";
                default: return r.toFixed(1); // Show as 3.5, 4.2, etc.
            }
        }

        document.addEventListener('DOMContentLoaded', function () {

            // =================== DEPARTMENT CHANGE ===================
            const deptSelect = document.getElementById("departmentSelect");
            if (deptSelect) {
                deptSelect.addEventListener("change", function () {
                    const deptId = this.value;
                    const employeeList = document.getElementById("employeeList");

                    if (!deptId) {
                        employeeList.innerHTML = "<p class='text-muted'>Select a department first...</p>";
                        return;
                    }

                    employeeList.innerHTML = "<p class='text-muted'>Loading employees...</p>";

                    fetch(`/Dashboard/GetEmployeesByDepartment?departmentId=${deptId}`)
                        .then(response => response.json())
                        .then(employees => {
                            if (employees.length > 0) {
                                let list = "";
                                employees.forEach(e => {
                                    // Use the JS converter to display the employee's overall rating as a string
                                    const ratingDisplay = getRatingDisplay(e.rating);

                                    list += `
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="SelectedEmployeeIds"
                                                    value="${e.employeeId}" id="emp_${e.employeeId}">
                                            <label class="form-check-label" for="emp_${e.employeeId}">
                                                ${e.name} <span class="text-muted medium">(${ratingDisplay})</span>
                                            </label>
                                        </div>`;
                                });
                                employeeList.innerHTML = list;
                            } else {
                                employeeList.innerHTML = "<p class='text-muted'>No employees found for this department.</p>";
                            }
                        })
                        .catch(() => {
                            employeeList.innerHTML = "<p class='text-danger'>Error loading employees.</p>";
                        });
                });
            }

            // =================== OPEN ADD PROJECT ===================
            window.openAddProjectModal = function () {
                new bootstrap.Modal(document.getElementById('addProjectModal')).show();
            };

            // =================== OPEN EDIT PROJECT ===================
            window.openEditModal = function (projectId) {
                fetch(`/Dashboard/GetProject?id=${projectId}`)
                    .then(res => res.json())
                    .then(project => {
                        document.getElementById("editProjectId").value = project.projectId;
                        document.getElementById("editProjectName").value = project.projectName;
                        document.getElementById("editStartDate").value = project.startDate.split('T')[0];
                        document.getElementById("editDueDate").value = project.dueDate.split('T')[0];
                        document.getElementById("editProjectRating").value = project.projectRating ? project.projectRating.toString() : "";
                        document.getElementById("editIsComplete").checked = project.isComplete;
                        document.getElementById("deleteProjectId").value = project.projectId;
                        document.getElementById("archiveProjectId").value = project.projectId;

                        fetch(`/Dashboard/GetProjectEmployees?id=${projectId}`)
                        .then(res => res.json())
                        .then(data => {
                            const container = document.getElementById("editEmployeeRatings");
                            if (data.length === 0) {
                                container.innerHTML = "<em>No employees assigned.</em>";
                            } else {
                                container.innerHTML = data.map(e => {
                                    // e.id is the ProjectEmployeeId (the join table ID)
                                    const ratingValue = e.employeeRating ? e.employeeRating.toString() : "";

                                    return `
                                        <div class="mb-2">
                                            <label class="fw-bold">${e.name}</label>
                                            <select class="form-select form-select-sm" data-projectemployeeid="${e.id}"> @* **FIX 1: Renamed data-empid to data-projectemployeeid for clarity** *@
                                                <option value="" ${ratingValue === "" ? "selected" : ""}>No Rating</option>
                                                <option value="1" ${ratingValue === "1" ? "selected" : ""}>1 - Need Training</option>
                                                <option value="2" ${ratingValue === "2" ? "selected" : ""}>2 - Needs Improvement</option>
                                                <option value="3" ${ratingValue === "3" ? "selected" : ""}>3 - Good</option>
                                                <option value="4" ${ratingValue === "4" ? "selected" : ""}>4 - Very Good</option>
                                                <option value="5" ${ratingValue === "5" ? "selected" : ""}>5 - Excellent</option>
                                            </select>
                                        </div>
                                    `;
                                }).join('');
                            }
                        });
                        new bootstrap.Modal(document.getElementById('editProjectModal')).show();
                    });
            };

            // =================== DELETE PROJECT ===================
            window.openDeleteModal = function (id) {
                document.getElementById("deleteProjectId").value = id;
                new bootstrap.Modal(document.getElementById('deleteProjectModal')).show();
            };

            // =================== ARCHIVE PROJECT ===================
            window.openArchiveModal = function (id) {
                document.getElementById("archiveProjectId").value = id;
                new bootstrap.Modal(document.getElementById('archiveProjectModal')).show();
            };

            // =================== BEFORE SUBMIT EDIT FORM ===================
            const updateForm = document.querySelector('form[asp-action="UpdateProject"]');
            if (updateForm) {
                updateForm.addEventListener('submit', function (e) {
                    // Remove previous hidden inputs
                    updateForm.querySelectorAll('input[name="ProjectEmployeeIds"], input[name="EmployeeRatings"]').forEach(el => el.remove());

                    // Collect selects inside editEmployeeRatings container
                    const selects = document.querySelectorAll('#editEmployeeRatings select[data-projectemployeeid]');
                    selects.forEach(select => {
                        const projectEmployeeId = select.getAttribute('data-projectemployeeid');
                        let rating = select.value;

                        // **FIX 1: Renamed the hidden input field to ProjectEmployeeIds**
                        // This sends the ProjectEmployee ID, allowing the controller to find the correct rating record.

                        // Hidden input for ProjectEmployeeIds
                        const hidId = document.createElement('input');
                        hidId.type = 'hidden';
                        hidId.name = 'ProjectEmployeeIds';
                        hidId.value = projectEmployeeId;
                        updateForm.appendChild(hidId);

                        // Hidden input for EmployeeRatings
                        const hidRating = document.createElement('input');
                        hidRating.type = 'hidden';
                        hidRating.name = 'EmployeeRatings';
                        hidRating.value = rating;
                        updateForm.appendChild(hidRating);
                    });

                    // Allow form to submit normally
                });
            }
        });
    </script>
}